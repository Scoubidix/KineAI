// utils/chatCleanup.js
const cron = require('node-cron');
const { PrismaClient } = require('@prisma/client');
const { 
  archiveFinishedPrograms, 
  cleanupArchivedPrograms 
} = require('../services/chatService');

const prisma = new PrismaClient();

// NOUVEAU: Nettoyer l'historique des chats kin√©s > 5 jours
const cleanOldKineChatHistory = async () => {
  try {
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    
    const result = await prisma.chatKine.deleteMany({
      where: {
        createdAt: {
          lt: fiveDaysAgo
        }
      }
    });
    
    console.log(`üóëÔ∏è Chat kin√©: ${result.count} messages supprim√©s (> 5 jours)`);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage chat kin√©:', error);
    throw error;
  }
};

// Archiver les programmes termin√©s (avec leurs conversations)
const archiveFinishedProgramsTask = async () => {
  try {
    const now = new Date();
    console.log(`üì¶ [${now.toISOString()}] D√©marrage archivage programmes termin√©s...`);
    
    const result = await archiveFinishedPrograms();
    
    if (result.programs > 0) {
      console.log(`‚úÖ Archivage termin√©: ${result.programs} programmes, ${result.messages} messages`);
    } else {
      console.log('‚ÑπÔ∏è Aucun programme √† archiver aujourd\'hui');
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå [${new Date().toISOString()}] Erreur archivage programmes:`, error);
    throw error;
  }
};

// Supprimer d√©finitivement les programmes archiv√©s depuis plus de 6 mois
const cleanupOldArchivedProgramsTask = async () => {
  try {
    const now = new Date();
    console.log(`üóëÔ∏è [${now.toISOString()}] D√©marrage suppression programmes archiv√©s > 6 mois...`);
    
    const result = await cleanupArchivedPrograms();
    
    if (result.programs > 0) {
      console.log(`‚úÖ Suppression termin√©e: ${result.programs} programmes, ${result.messages} messages`);
      console.log('üìã Programmes supprim√©s:', result.details.map(p => `${p.titre} (archiv√© le ${p.archivedAt})`));
    } else {
      console.log('‚ÑπÔ∏è Aucun programme archiv√© √† supprimer (< 6 mois)');
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå [${new Date().toISOString()}] Erreur suppression programmes archiv√©s:`, error);
    throw error;
  }
};

// NOUVEAU: T√¢che de nettoyage du chat kin√©
const cleanKineChatTask = async () => {
  try {
    const now = new Date();
    console.log(`üí¨ [${now.toISOString()}] D√©marrage nettoyage chat kin√© > 5 jours...`);
    
    const result = await cleanOldKineChatHistory();
    
    if (result.count > 0) {
      console.log(`‚úÖ Nettoyage chat kin√© termin√©: ${result.count} messages supprim√©s`);
    } else {
      console.log('‚ÑπÔ∏è Aucun message de chat kin√© √† supprimer (< 5 jours)');
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå [${new Date().toISOString()}] Erreur nettoyage chat kin√©:`, error);
    throw error;
  }
};

// D√©marrer les t√¢ches automatiques
const startProgramCleanupCron = () => {
  console.log(`üöÄ [${new Date().toISOString()}] Initialisation du syst√®me d'archivage des programmes + chat kin√©...`);
  
  // T√¢che quotidienne √† 2h du matin : archiver les programmes termin√©s
  cron.schedule('0 2 * * *', async () => {
    try {
      console.log('üïê T√¢che quotidienne d\'archivage d√©clench√©e (2h00)');
      await archiveFinishedProgramsTask();
    } catch (error) {
      console.error('‚ùå Erreur t√¢che archivage quotidienne:', error);
    }
  }, {
    timezone: "Europe/Paris",
    scheduled: true
  });

  // NOUVEAU: T√¢che quotidienne √† 2h30 du matin : nettoyer le chat kin√©
  cron.schedule('30 2 * * *', async () => {
    try {
      console.log('üí¨ T√¢che quotidienne de nettoyage chat kin√© d√©clench√©e (2h30)');
      await cleanKineChatTask();
    } catch (error) {
      console.error('‚ùå Erreur t√¢che nettoyage chat kin√©:', error);
    }
  }, {
    timezone: "Europe/Paris",
    scheduled: true
  });

  // T√¢che hebdomadaire le dimanche √† 3h : supprimer les programmes archiv√©s > 6 mois
  cron.schedule('0 3 * * 0', async () => {
    try {
      console.log('üóëÔ∏è T√¢che hebdomadaire de nettoyage d√©clench√©e (dimanche 3h00)');
      await cleanupOldArchivedProgramsTask();
    } catch (error) {
      console.error('‚ùå Erreur t√¢che nettoyage hebdomadaire:', error);
    }
  }, {
    timezone: "Europe/Paris",
    scheduled: true
  });

  console.log('üìÖ Syst√®me d\'archivage programm√©:');
  console.log('   - Archivage quotidien √† 2h00 (programmes termin√©s)');
  console.log('   - Nettoyage chat kin√© √† 2h30 (messages > 5 jours)');
  console.log('   - Nettoyage hebdomadaire dimanche 3h00 (archives > 6 mois)');
};

// Fonctions de test manuel (pour d√©veloppement/debug)
const manualArchiveTest = async () => {
  try {
    console.log('üß™ Test manuel archivage programmes termin√©s...');
    const result = await archiveFinishedProgramsTask();
    console.log('‚úÖ Test archivage termin√©:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur test manuel archivage:', error);
    throw error;
  }
};

const manualCleanupTest = async () => {
  try {
    console.log('üß™ Test manuel nettoyage programmes archiv√©s...');
    const result = await cleanupOldArchivedProgramsTask();
    console.log('‚úÖ Test nettoyage termin√©:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur test manuel nettoyage:', error);
    throw error;
  }
};

// NOUVEAU: Test manuel du nettoyage chat kin√©
const manualKineChatCleanupTest = async () => {
  try {
    console.log('üß™ Test manuel nettoyage chat kin√©...');
    const result = await cleanKineChatTask();
    console.log('‚úÖ Test nettoyage chat kin√© termin√©:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur test manuel nettoyage chat kin√©:', error);
    throw error;
  }
};

module.exports = {
  startProgramCleanupCron,
  archiveFinishedProgramsTask,
  cleanupOldArchivedProgramsTask,
  cleanKineChatTask, // NOUVEAU
  cleanOldKineChatHistory, // NOUVEAU
  manualArchiveTest,
  manualCleanupTest,
  manualKineChatCleanupTest // NOUVEAU
};