// utils/chatCleanup.js
const cron = require('node-cron');
const prismaService = require('../services/prismaService');

// NOUVEAU: Nettoyer l'historique des chats kin√©s > 5 jours
const cleanOldKineChatHistory = async () => {
  return await prismaService.executeWithTempConnection(async (prisma) => {
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    
    const result = await prisma.chatKine.deleteMany({
      where: {
        createdAt: {
          lt: fiveDaysAgo
        }
      }
    });
    
    console.log(`üóëÔ∏è Chat kin√©: ${result.count} messages supprim√©s (> 5 jours)`);
    return result;
  });
};

// Archiver les programmes termin√©s (avec leurs conversations)
const archiveFinishedProgramsTask = async () => {
  try {
    const now = new Date();
    console.log(`üì¶ [${now.toISOString()}] D√©marrage archivage programmes termin√©s...`);
    
    const result = await prismaService.executeWithTempConnection(async (prisma) => {
      // Trouver tous les programmes termin√©s non archiv√©s
      const finishedPrograms = await prisma.programme.findMany({
        where: {
          dateFin: {
            lt: now
          },
          isArchived: false
        },
        select: { id: true, titre: true, dateFin: true }
      });

      if (finishedPrograms.length === 0) {
        console.log('üìã Aucun programme termin√© √† archiver');
        return { programs: 0, messages: 0 };
      }

      // Archiver tous les programmes termin√©s
      const updateResult = await prisma.programme.updateMany({
        where: {
          id: {
            in: finishedPrograms.map(p => p.id)
          }
        },
        data: {
          isArchived: true,
          archivedAt: now
        }
      });

      // Compter les messages associ√©s
      const messageCount = await prisma.chatSession.count({
        where: {
          programmeId: {
            in: finishedPrograms.map(p => p.id)
          }
        }
      });

      console.log(`üì¶ ${updateResult.count} programmes termin√©s archiv√©s avec leurs conversations`);
      console.log(`üí¨ ${messageCount} messages de chat archiv√©s avec les programmes`);

      return {
        programs: updateResult.count,
        messages: messageCount,
        details: finishedPrograms
      };
    });
    
    if (result.programs > 0) {
      console.log(`‚úÖ Archivage termin√©: ${result.programs} programmes, ${result.messages} messages`);
    } else {
      console.log('‚ÑπÔ∏è Aucun programme √† archiver aujourd\'hui');
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå [${new Date().toISOString()}] Erreur archivage programmes:`, error);
    throw error;
  }
};

// Supprimer d√©finitivement les programmes archiv√©s depuis plus de 6 mois
const cleanupOldArchivedProgramsTask = async () => {
  try {
    const now = new Date();
    console.log(`üóëÔ∏è [${now.toISOString()}] D√©marrage suppression programmes archiv√©s > 6 mois...`);
    
    const result = await prismaService.executeWithTempConnection(async (prisma) => {
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

      // Trouver les programmes archiv√©s depuis plus de 6 mois
      const oldArchivedPrograms = await prisma.programme.findMany({
        where: {
          isArchived: true,
          archivedAt: {
            lt: sixMonthsAgo
          }
        },
        select: { id: true, titre: true, archivedAt: true }
      });

      if (oldArchivedPrograms.length === 0) {
        console.log('üßπ Aucun programme archiv√© √† supprimer (< 6 mois)');
        return { programs: 0, messages: 0 };
      }

      // Compter les messages √† supprimer
      const messageCount = await prisma.chatSession.count({
        where: {
          programmeId: {
            in: oldArchivedPrograms.map(p => p.id)
          }
        }
      });

      // Supprimer un par un pour g√©rer les contraintes
      let deletedPrograms = 0;
      const deletedDetails = [];

      for (const program of oldArchivedPrograms) {
        try {
          await prisma.programme.delete({
            where: { id: program.id }
          });
          
          deletedPrograms++;
          deletedDetails.push({
            id: program.id,
            titre: program.titre,
            archivedAt: program.archivedAt
          });
          
          console.log(`üóëÔ∏è Programme supprim√©: "${program.titre}" (ID: ${program.id})`);
        } catch (deleteError) {
          console.error(`‚ùå Erreur suppression programme ${program.id}:`, deleteError.message);
        }
      }

      console.log(`üóëÔ∏è Suppression d√©finitive: ${deletedPrograms} programmes et ${messageCount} messages (archiv√©s > 6 mois)`);
      
      return {
        programs: deletedPrograms,
        messages: messageCount,
        details: deletedDetails
      };
    });
    
    if (result.programs > 0) {
      console.log(`‚úÖ Suppression termin√©e: ${result.programs} programmes, ${result.messages} messages`);
      console.log('üìã Programmes supprim√©s:', result.details.map(p => `${p.titre} (archiv√© le ${p.archivedAt})`));
    } else {
      console.log('‚ÑπÔ∏è Aucun programme archiv√© √† supprimer (< 6 mois)');
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå [${new Date().toISOString()}] Erreur suppression programmes archiv√©s:`, error);
    throw error;
  }
};

// NOUVEAU: T√¢che de nettoyage du chat kin√©
const cleanKineChatTask = async () => {
  try {
    const now = new Date();
    console.log(`üí¨ [${now.toISOString()}] D√©marrage nettoyage chat kin√© > 5 jours...`);
    
    const result = await cleanOldKineChatHistory();
    
    if (result.count > 0) {
      console.log(`‚úÖ Nettoyage chat kin√© termin√©: ${result.count} messages supprim√©s`);
    } else {
      console.log('‚ÑπÔ∏è Aucun message de chat kin√© √† supprimer (< 5 jours)');
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå [${new Date().toISOString()}] Erreur nettoyage chat kin√©:`, error);
    throw error;
  }
};

// D√©marrer les t√¢ches automatiques
const startProgramCleanupCron = () => {
  console.log('üöÄ D√©marrage des t√¢ches CRON de nettoyage...');

  // Archivage quotidien - 2h00
  cron.schedule('0 2 * * *', async () => {
    try {
      await archiveFinishedProgramsTask();
    } catch (error) {
      console.error('‚ùå Erreur t√¢che archivage quotidienne:', error);
    }
  }, {
    timezone: "Europe/Paris",
    scheduled: true
  });

  // Nettoyage chat kin√© - 2h30
  cron.schedule('30 2 * * *', async () => {
    try {
      await cleanKineChatTask();
    } catch (error) {
      console.error('‚ùå Erreur t√¢che nettoyage chat kin√©:', error);
    }
  }, {
    timezone: "Europe/Paris",
    scheduled: true
  });

  // Nettoyage hebdomadaire - 3h00 dimanche
  cron.schedule('0 3 * * 0', async () => {
    try {
      await cleanupOldArchivedProgramsTask();
    } catch (error) {
      console.error('‚ùå Erreur t√¢che nettoyage hebdomadaire:', error);
    }
  }, {
    timezone: "Europe/Paris",
    scheduled: true
  });

  console.log('‚úÖ T√¢ches CRON configur√©es avec succ√®s');
};

// Fonctions de test manuel (pour d√©veloppement/debug)
const manualArchiveTest = async () => {
  try {
    console.log('üß™ Test manuel archivage programmes termin√©s...');
    const result = await archiveFinishedProgramsTask();
    console.log('‚úÖ Test archivage termin√©:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur test manuel archivage:', error);
    throw error;
  }
};

const manualCleanupTest = async () => {
  try {
    console.log('üß™ Test manuel nettoyage programmes archiv√©s...');
    const result = await cleanupOldArchivedProgramsTask();
    console.log('‚úÖ Test nettoyage termin√©:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur test manuel nettoyage:', error);
    throw error;
  }
};

const manualKineChatCleanupTest = async () => {
  try {
    console.log('üß™ Test manuel nettoyage chat kin√©...');
    const result = await cleanKineChatTask();
    console.log('‚úÖ Test nettoyage chat kin√© termin√©:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Erreur test manuel nettoyage chat kin√©:', error);
    throw error;
  }
};

module.exports = {
  startProgramCleanupCron,
  archiveFinishedProgramsTask,
  cleanupOldArchivedProgramsTask,
  cleanKineChatTask,
  cleanOldKineChatHistory,
  manualArchiveTest,
  manualCleanupTest,
  manualKineChatCleanupTest
};