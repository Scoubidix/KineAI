const express = require('express');
const logger = require('../utils/logger');
const router = express.Router();
const { authenticate } = require('../middleware/authenticate');
const rgpdService = require('../services/rgpdService');
const { sanitizeUID } = require('../utils/logSanitizer');

/**
 * POST /api/rgpd/export-data
 * G√©n√®re un export ZIP des donn√©es utilisateur
 */
router.post('/export-data', authenticate, async (req, res) => {
  try {
    const kineUid = req.uid;
    
    logger.debug(`üì¶ Demande d'export RGPD pour: ${sanitizeUID(kineUid)}`);

    const result = await rgpdService.generateDataExport(kineUid);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        error: result.error,
        details: result.details
      });
    }

    res.json({
      success: true,
      message: 'Export g√©n√©r√© avec succ√®s',
      token: result.token,
      expiresAt: result.expiresAt,
      downloadUrl: `/api/rgpd/download/${result.token}`,
      dataSize: result.dataSize,
      validUntil: result.expiresAt.toISOString(),
      instructions: {
        fr: 'Cliquez sur le lien de t√©l√©chargement pour obtenir votre export ZIP. Ce lien expire dans 24 heures.',
        en: 'Click the download link to get your ZIP export. This link expires in 24 hours.'
      }
    });

  } catch (error) {
    logger.error('‚ùå Erreur route export RGPD:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la g√©n√©ration de l\'export',
      details: error.message
    });
  }
});

/**
 * GET /api/rgpd/download/:token
 * T√©l√©charge le fichier ZIP d'export
 */
router.get('/download/:token', async (req, res) => {
  try {
    const { token } = req.params;
    
    logger.debug(`üì• T√©l√©chargement d'export RGPD - Token: ${token.substring(0, 8)}...`);

    // Le service g√®re directement la r√©ponse
    await rgpdService.downloadExport(token, res);

  } catch (error) {
    logger.error('‚ùå Erreur t√©l√©chargement export:', error);
    if (!res.headersSent) {
      res.status(500).json({
        success: false,
        error: 'Erreur lors du t√©l√©chargement',
        details: error.message
      });
    }
  }
});

/**
 * GET /api/rgpd/eligibility
 * V√©rifie l'√©ligibilit√© pour la suppression de compte
 */
router.get('/eligibility', authenticate, async (req, res) => {
  try {
    const kineUid = req.uid;
    
    logger.debug(`üîç V√©rification √©ligibilit√© suppression pour: ${sanitizeUID(kineUid)}`);

    const eligibility = await rgpdService.checkDeletionEligibility(kineUid);

    res.json({
      success: true,
      ...eligibility,
      checkedAt: new Date().toISOString()
    });

  } catch (error) {
    logger.error('‚ùå Erreur route √©ligibilit√© RGPD:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la v√©rification d\'√©ligibilit√©',
      details: error.message
    });
  }
});

/**
 * POST /api/rgpd/delete-account
 * Supprime d√©finitivement un compte utilisateur
 */
router.post('/delete-account', authenticate, async (req, res) => {
  try {
    const kineUid = req.uid;
    const { 
      confirmationText, 
      understands7DaysDelay,
      agreesToDataLoss 
    } = req.body;

    logger.debug(`üóëÔ∏è Demande de suppression de compte pour: ${sanitizeUID(kineUid)}`);

    // 1. V√©rifications de s√©curit√© frontend
    if (!confirmationText || confirmationText !== 'SUPPRIMER') {
      return res.status(400).json({
        success: false,
        error: 'Vous devez saisir exactement "SUPPRIMER" pour confirmer',
        code: 'CONFIRMATION_INVALID'
      });
    }

    if (!understands7DaysDelay || !agreesToDataLoss) {
      return res.status(400).json({
        success: false,
        error: 'Vous devez accepter toutes les conditions',
        code: 'CONDITIONS_NOT_ACCEPTED'
      });
    }

    // 2. V√©rification automatique de l'√©ligibilit√© (plan + export r√©cent)
    const eligibility = await rgpdService.checkDeletionEligibility(kineUid);

    if (!eligibility.canDelete) {
      let code = 'DELETION_NOT_ALLOWED';
      if (eligibility.planType !== 'FREE') {
        code = 'SUBSCRIPTION_ACTIVE';
      } else if (!eligibility.hasRecentExport) {
        code = 'EXPORT_REQUIRED';
      }

      return res.status(400).json({
        success: false,
        error: eligibility.reason,
        planType: eligibility.planType,
        hasRecentExport: eligibility.hasRecentExport,
        code
      });
    }

    logger.debug(`‚úÖ √âligibilit√© confirm√©e - Plan: ${eligibility.planType}, Export: ${eligibility.hasRecentExport}`);

    // 3. Supprimer le compte
    const result = await rgpdService.deleteAccount(kineUid);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        error: result.error,
        code: 'DELETION_ERROR',
        details: result.details
      });
    }

    logger.debug(`‚úÖ Compte supprim√© avec succ√®s:`, result.details);

    res.json({
      success: true,
      message: 'Votre compte a √©t√© supprim√© d√©finitivement',
      details: {
        deletedData: {
          patients: result.details.patients,
          programmes: result.details.programmes,
          exercicesModeles: result.details.exercicesModeles,
          conversationsIA: result.details.chatIA,
          notifications: result.details.notifications
        },
        deletedAt: result.details.deletedAt,
        kineInfo: {
          nom: result.details.kine,
          email: result.details.email
        }
      },
      nextSteps: {
        fr: [
          'Votre compte a √©t√© supprim√© d√©finitivement',
          'Toutes vos donn√©es ont √©t√© effac√©es de nos serveurs',
          'Vous ne pouvez plus vous connecter √† l\'application',
          'Si vous souhaitez utiliser nos services √† nouveau, vous devrez cr√©er un nouveau compte'
        ],
        en: [
          'Your account has been permanently deleted',
          'All your data has been erased from our servers',
          'You can no longer log in to the application',
          'If you wish to use our services again, you will need to create a new account'
        ]
      }
    });

  } catch (error) {
    logger.error('‚ùå Erreur route suppression compte:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la suppression du compte',
      details: error.message,
      code: 'SERVER_ERROR'
    });
  }
});

/**
 * GET /api/rgpd/stats (Route admin/debug)
 * Obtient les statistiques des exports en cours
 */
router.get('/stats', authenticate, async (req, res) => {
  try {
    // Route r√©serv√©e aux admins en prod
    if (process.env.NODE_ENV === 'production') {
      return res.status(403).json({
        success: false,
        error: 'Route non disponible en production'
      });
    }

    const stats = rgpdService.getExportStats();
    res.json({
      success: true,
      stats
    });

  } catch (error) {
    logger.error('‚ùå Erreur stats RGPD:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des statistiques'
    });
  }
});

/**
 * POST /api/rgpd/cleanup (Route admin/maintenance)
 * Force le nettoyage des tokens expir√©s
 */
router.post('/cleanup', authenticate, async (req, res) => {
  try {
    // Route r√©serv√©e aux admins en prod
    if (process.env.NODE_ENV === 'production') {
      return res.status(403).json({
        success: false,
        error: 'Route non disponible en production'
      });
    }

    rgpdService.cleanupExpiredTokens();
    
    res.json({
      success: true,
      message: 'Nettoyage des tokens effectu√©',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('‚ùå Erreur cleanup RGPD:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du nettoyage'
    });
  }
});

module.exports = router;