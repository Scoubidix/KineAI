// routes/webhook/stripe.js
// Route pour traiter les webhooks Stripe

const express = require('express');
const { PrismaClient } = require('@prisma/client');
const stripeService = require('../../services/StripeService');

const router = express.Router();
const prisma = new PrismaClient();

// Middleware pour r√©cup√©rer le raw body (n√©cessaire pour Stripe)
router.use('/stripe', express.raw({ type: 'application/json' }));

// Route webhook Stripe
router.post('/stripe', async (req, res) => {
  const signature = req.get('stripe-signature');
  
  try {
    // Valider le webhook avec Stripe
    const event = stripeService.validateWebhook(req.body, signature);
    
    console.log(`üéØ Webhook Stripe re√ßu: ${event.type}`);
    
    // Traiter l'√©v√©nement selon son type
    switch (event.type) {
      // ‚≠ê PLUS IMPORTANT : Premi√®re cr√©ation d'abonnement
      case 'checkout.session.completed':
        await handleCheckoutCompleted(event.data.object);
        break;
        
      case 'customer.subscription.created':
        await handleSubscriptionCreated(event.data.object);
        break;
        
      case 'customer.subscription.updated':
        await handleSubscriptionUpdated(event.data.object);
        break;
        
      case 'customer.subscription.deleted':
        await handleSubscriptionDeleted(event.data.object);
        break;
        
      case 'invoice.payment_succeeded':
        await handlePaymentSucceeded(event.data.object);
        break;
        
      case 'invoice.payment_failed':
        await handlePaymentFailed(event.data.object);
        break;
        
      default:
        console.log(`Type d'√©v√©nement non g√©r√©: ${event.type}`);
    }
    
    // R√©pondre √† Stripe que tout s'est bien pass√©
    res.json({ received: true });
    
  } catch (error) {
    console.error('‚ùå Erreur webhook Stripe:', error);
    res.status(400).send(`Webhook Error: ${error.message}`);
  }
});

// ========== HANDLERS POUR CHAQUE TYPE D'√âV√âNEMENT ==========

/**
 * üéØ PLUS IMPORTANT : Gestion checkout session completed
 * C'est ici que tout commence apr√®s un paiement r√©ussi !
 */
async function handleCheckoutCompleted(session) {
  try {
    console.log('‚úÖ Checkout completed:', session.id);
    
    // R√©cup√©rer les m√©tadonn√©es du checkout
    const kineId = parseInt(session.metadata?.kineId);
    const planType = session.metadata?.planType;
    
    if (!kineId || !planType) {
      console.error('‚ùå M√©tadonn√©es manquantes dans checkout:', session.metadata);
      return;
    }

    // R√©cup√©rer le kin√©
    const kine = await prisma.kine.findUnique({
      where: { id: kineId }
    });

    if (!kine) {
      console.error('‚ùå Kin√© non trouv√©:', kineId);
      return;
    }

    // Si c'est un abonnement (mode subscription)
    if (session.mode === 'subscription' && session.subscription) {
      
      // Mettre √† jour le kin√© avec les infos Stripe
      await prisma.kine.update({
        where: { id: kineId },
        data: {
          stripeCustomerId: session.customer,
          subscriptionId: session.subscription,
          planType: planType,
          subscriptionStatus: 'ACTIVE', // Assum√© actif apr√®s checkout r√©ussi
          subscriptionStartDate: new Date(),
          // Note: subscriptionEndDate sera mise √† jour par subscription.created
        }
      });
      
      console.log(`üéâ Kin√© ${kineId} mis √† jour: Plan ${planType}, Customer ${session.customer}, Subscription ${session.subscription}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur handleCheckoutCompleted:', error);
  }
}

/**
 * Gestion cr√©ation d'abonnement (compl√®te les infos du checkout)
 */
async function handleSubscriptionCreated(subscription) {
  try {
    console.log('üìù Cr√©ation abonnement:', subscription.id);
    
    // R√©cup√©rer le kin√© via son subscription ID
    const kine = await prisma.kine.findFirst({
      where: { subscriptionId: subscription.id }
    });
    
    if (!kine) {
      console.error('‚ùå Kin√© non trouv√© pour subscription:', subscription.id);
      return;
    }
    
    // D√©terminer le type de plan depuis le price ID
    const planType = stripeService.getPlanTypeFromPriceId(subscription.items.data[0].price.id);
    
    // Mettre √† jour avec les dates pr√©cises de l'abonnement
    await prisma.kine.update({
      where: { id: kine.id },
      data: {
        planType: planType,
        subscriptionStatus: stripeService.mapSubscriptionStatus(subscription.status),
        subscriptionStartDate: new Date(subscription.current_period_start * 1000),
        subscriptionEndDate: new Date(subscription.current_period_end * 1000),
        trialEndDate: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,
      }
    });
    
    console.log(`üìÖ Dates abonnement mises √† jour pour kin√© ${kine.id}: ${planType} du ${new Date(subscription.current_period_start * 1000).toLocaleDateString()} au ${new Date(subscription.current_period_end * 1000).toLocaleDateString()}`);
    
  } catch (error) {
    console.error('‚ùå Erreur handleSubscriptionCreated:', error);
  }
}

/**
 * Gestion mise √† jour d'abonnement
 */
async function handleSubscriptionUpdated(subscription) {
  try {
    console.log('üîÑ Mise √† jour abonnement:', subscription.id);
    
    // R√©cup√©rer le kin√© via l'ID d'abonnement
    const kine = await prisma.kine.findFirst({
      where: { subscriptionId: subscription.id }
    });
    
    if (!kine) {
      console.error('‚ùå Kin√© non trouv√© pour subscription:', subscription.id);
      return;
    }
    
    // D√©terminer le nouveau type de plan
    const planType = stripeService.getPlanTypeFromPriceId(subscription.items.data[0].price.id);
    
    // Mettre √† jour les informations d'abonnement
    await prisma.kine.update({
      where: { id: kine.id },
      data: {
        planType: planType,
        subscriptionStatus: stripeService.mapSubscriptionStatus(subscription.status),
        subscriptionStartDate: new Date(subscription.current_period_start * 1000),
        subscriptionEndDate: new Date(subscription.current_period_end * 1000),
        trialEndDate: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,
      }
    });
    
    console.log(`üîÑ Abonnement mis √† jour pour kin√© ${kine.id}: ${planType} (${subscription.status})`);
    
  } catch (error) {
    console.error('‚ùå Erreur handleSubscriptionUpdated:', error);
  }
}

/**
 * Gestion suppression d'abonnement
 */
async function handleSubscriptionDeleted(subscription) {
  try {
    console.log('üóëÔ∏è Suppression abonnement:', subscription.id);
    
    // R√©cup√©rer le kin√© via l'ID d'abonnement
    const kine = await prisma.kine.findFirst({
      where: { subscriptionId: subscription.id }
    });
    
    if (!kine) {
      console.error('‚ùå Kin√© non trouv√© pour subscription:', subscription.id);
      return;
    }
    
    // IMPORTANT: On garde le planType pour l'historique (surtout pour Pionnier)
    await prisma.kine.update({
      where: { id: kine.id },
      data: {
        subscriptionId: null,
        subscriptionStatus: 'CANCELED',
        subscriptionEndDate: new Date(subscription.ended_at * 1000),
        // planType: null, // ‚ùå NE PAS supprimer pour garder l'historique
      }
    });
    
    console.log(`üóëÔ∏è Abonnement supprim√© pour kin√© ${kine.id} (plan ${kine.planType} conserv√© en historique)`);
    
  } catch (error) {
    console.error('‚ùå Erreur handleSubscriptionDeleted:', error);
  }
}

/**
 * Gestion paiement r√©ussi
 */
async function handlePaymentSucceeded(invoice) {
  try {
    console.log('üí∞ Paiement r√©ussi pour invoice:', invoice.id);
    
    if (invoice.subscription) {
      // R√©cup√©rer le kin√© via l'ID d'abonnement
      const kine = await prisma.kine.findFirst({
        where: { subscriptionId: invoice.subscription }
      });
      
      if (kine) {
        // S'assurer que le statut est actif apr√®s un paiement r√©ussi
        await prisma.kine.update({
          where: { id: kine.id },
          data: {
            subscriptionStatus: 'ACTIVE'
          }
        });
        
        console.log(`‚úÖ Statut mis √† jour vers ACTIVE pour kin√© ${kine.id}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur handlePaymentSucceeded:', error);
  }
}

/**
 * Gestion √©chec de paiement
 */
async function handlePaymentFailed(invoice) {
  try {
    console.log('‚ùå √âchec de paiement pour invoice:', invoice.id);
    
    if (invoice.subscription) {
      // R√©cup√©rer le kin√© via l'ID d'abonnement
      const kine = await prisma.kine.findFirst({
        where: { subscriptionId: invoice.subscription }
      });
      
      if (kine) {
        // Mettre le statut en impay√©
        await prisma.kine.update({
          where: { id: kine.id },
          data: {
            subscriptionStatus: 'PAST_DUE'
          }
        });
        
        console.log(`‚ö†Ô∏è Statut mis √† jour vers PAST_DUE pour kin√© ${kine.id}`);
        
        // TODO: Envoyer une notification au kin√©
        // TODO: Possiblement suspendre l'acc√®s apr√®s X tentatives
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur handlePaymentFailed:', error);
  }
}

module.exports = router;