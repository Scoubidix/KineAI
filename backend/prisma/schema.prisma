generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Kine {
  id             Int              @id @default(autoincrement())
  uid            String           @unique
  email          String           @unique
  firstName      String
  lastName       String
  phone          String
  rpps           String           @unique
  birthDate      DateTime
  adresseCabinet String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // ========== NOUVEAUX CHAMPS STRIPE ==========
  stripeCustomerId      String?           // ID client Stripe
  subscriptionId        String?           // ID abonnement Stripe actuel
  planType              PlanType?         // Type de plan actuel
  subscriptionStatus    SubscriptionStatus? // Statut de l'abonnement
  subscriptionStartDate DateTime?         // Date début abonnement
  subscriptionEndDate   DateTime?         // Date fin abonnement
  trialEndDate          DateTime?         // Date fin période d'essai (si applicable)
  // ===============================================

  patients              Patient[]
  exercicesModeles      ExerciceModele[]
  notifications         Notification[]
  
  // ========== NOUVELLES RELATIONS IA ==========
  chatIaBasique         ChatIaBasique[]
  chatIaBiblio          ChatIaBiblio[]
  chatIaClinique        ChatIaClinique[]
  chatIaAdministrative  ChatIaAdministrative[]
  // =============================================
}

model Patient {
  id         Int         @id @default(autoincrement())
  firstName  String
  lastName   String
  birthDate  DateTime
  phone      String
  email      String
  goals      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  kineId     Int
  kine       Kine         @relation(fields: [kineId], references: [id])

  programmes        Programme[]
  chatSessions      ChatSession[]
  sessionValidations SessionValidation[]
  notifications     Notification[]
}

model ExerciceModele {
  id          Int      @id @default(autoincrement())
  kine        Kine     @relation(fields: [kineId], references: [id])
  kineId      Int
  nom         String
  description String
  tags        String?  // tags séparés par virgules
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  exercicesProgramme ExerciceProgramme[]
}

model Programme {
  id          Int       @id @default(autoincrement())
  titre       String
  description String
  duree       Int       // en jours
  dateDebut   DateTime  @default(now())
  dateFin     DateTime
  isArchived  Boolean   @default(false)
  archivedAt  DateTime? // Date d'archivage (pour suppression après 6 mois)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  patientId   Int
  patient     Patient   @relation(fields: [patientId], references: [id])

  exercices          ExerciceProgramme[]
  chatSessions       ChatSession[]
  sessionValidations SessionValidation[]
  notifications      Notification[]
}

model ExerciceProgramme {
  id               Int             @id @default(autoincrement())
  programme        Programme       @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  programmeId      Int
  exerciceModele   ExerciceModele @relation(fields: [exerciceModeleId], references: [id])
  exerciceModeleId Int

  series           Int
  repetitions      Int
  pause            Int         // en secondes
  consigne         String

  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model ChatSession {
  id          Int      @id @default(autoincrement())
  message     String   // Le contenu du message
  role        ChatRole // Qui a envoyé le message
  createdAt   DateTime @default(now())
  
  // Relations avec le patient ET le programme
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  programmeId Int
  programme   Programme @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  
  // Index pour optimiser les requêtes
  @@index([patientId, programmeId])
  @@index([programmeId])
  @@map("chat_sessions")
}

model SessionValidation {
  id           Int       @id @default(autoincrement())
  date         DateTime  @db.Date // Date de la séance (YYYY-MM-DD)
  isValidated  Boolean   @default(false)
  validatedAt  DateTime? // Moment exact de la validation
  
  // Métriques
  painLevel       Int?    // Douleur de 0 à 10 (null si pas encore validé)
  difficultyLevel Int?    // Difficulté de 0 à 10 (null si pas encore validé)
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  patientId    Int
  patient      Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  programmeId  Int
  programme    Programme @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  
  // Contraintes : Un patient ne peut valider qu'une fois par jour pour un programme donné
  @@unique([patientId, programmeId, date])
  
  // Index pour optimiser les requêtes
  @@index([date, programmeId]) // Pour récupérer l'adhérence par date/programme
  @@index([patientId, date])   // Pour récupérer l'historique d'un patient
  @@index([programmeId])       // Pour stats globales d'un programme
  
  @@map("session_validations")
}

// ========== NOUVELLES TABLES IA ==========

model ChatIaBasique {
  id          Int      @id @default(autoincrement())
  message     String   // Question du kiné
  response    String   // Réponse de l'IA
  createdAt   DateTime @default(now())
  
  // Relation avec le kiné
  kineId      Int
  kine        Kine     @relation(fields: [kineId], references: [id], onDelete: Cascade)
  
  // Index pour optimiser les requêtes par kiné et date
  @@index([kineId, createdAt])
  @@map("chat_ia_basique")
}

model ChatIaBiblio {
  id          Int      @id @default(autoincrement())
  message     String   // Question du kiné
  response    String   // Réponse de l'IA
  createdAt   DateTime @default(now())
  
  // Relation avec le kiné
  kineId      Int
  kine        Kine     @relation(fields: [kineId], references: [id], onDelete: Cascade)
  
  // Index pour optimiser les requêtes par kiné et date
  @@index([kineId, createdAt])
  @@map("chat_ia_biblio")
}

model ChatIaClinique {
  id          Int      @id @default(autoincrement())
  message     String   // Question du kiné
  response    String   // Réponse de l'IA
  createdAt   DateTime @default(now())
  
  // Relation avec le kiné
  kineId      Int
  kine        Kine     @relation(fields: [kineId], references: [id], onDelete: Cascade)
  
  // Index pour optimiser les requêtes par kiné et date
  @@index([kineId, createdAt])
  @@map("chat_ia_clinique")
}

model ChatIaAdministrative {
  id          Int      @id @default(autoincrement())
  message     String   // Question du kiné
  response    String   // Réponse de l'IA
  createdAt   DateTime @default(now())
  
  // Relation avec le kiné
  kineId      Int
  kine        Kine     @relation(fields: [kineId], references: [id], onDelete: Cascade)
  
  // Index pour optimiser les requêtes par kiné et date
  @@index([kineId, createdAt])
  @@map("chat_ia_administrative")
}

// ==========================================

model Notification {
  id          Int              @id @default(autoincrement())
  type        NotificationType // Type de notification
  title       String           // Titre court
  message     String           // Message descriptif
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  
  // Relation obligatoire avec le kiné
  kineId      Int
  kine        Kine             @relation(fields: [kineId], references: [id], onDelete: Cascade)
  
  // Relations optionnelles pour le contexte
  patientId   Int?
  patient     Patient?         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  programmeId Int?
  programme   Programme?       @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  
  // Métadonnées JSON pour infos supplémentaires
  metadata    Json?            // Ex: { "painLevel": 8, "difficultyLevel": 7, "validationDate": "2025-01-15" }
  
  // Index pour optimiser les requêtes
  @@index([kineId, isRead])    // Pour récupérer les notifications d'un kiné par statut
  @@index([kineId, createdAt]) // Pour trier par date
  @@index([type])              // Pour filtrer par type
  
  @@map("notifications")
}

// ========== NOUVEAUX ENUMS STRIPE ==========
enum PlanType {
  FREE
  DECLIC    // 9€/mois - 1 chatbot + IA conversationnel
  PRATIQUE  // 19€/mois - 3 chatbots + IA conversationnel + biblio + clinique
  PIONNIER  // 20€/mois - Plan Expert à prix réduit (limité à 100 places)
  EXPERT    // 59€/mois - Chatbots illimités + tous les assistants
  
  @@map("plan_type")
}

enum SubscriptionStatus {
  ACTIVE              // Abonnement actif
  CANCELED            // Annulé (mais encore actif jusqu'à la fin de période)
  PAST_DUE           // Impayé
  UNPAID             // Non payé
  INCOMPLETE         // Paiement incomplet
  INCOMPLETE_EXPIRED // Paiement incomplet expiré
  TRIALING           // En période d'essai
  PAUSED             // Suspendu
  
  @@map("subscription_status")
}
// ==========================================

enum NotificationType {
  DAILY_VALIDATION    // Patient valide une journée
  PROGRAM_COMPLETED   // Programme terminé
  PAIN_ALERT         // Niveau douleur élevé (≥7)
  
  @@map("notification_type")
}

enum ChatRole {
  USER      // Message du patient
  ASSISTANT // Réponse de l'IA
  SYSTEM    // Messages système (bienvenue, etc.)
  
  @@map("chat_role")
}