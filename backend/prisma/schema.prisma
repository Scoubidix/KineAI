generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Kine {
  id             Int              @id @default(autoincrement())
  uid            String           @unique
  email          String           @unique
  firstName      String
  lastName       String
  phone          String
  rpps           String           @unique
  birthDate      DateTime
  adresseCabinet String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  patients       Patient[]
  exercicesModeles ExerciceModele[]
}

model Patient {
  id         Int         @id @default(autoincrement())
  firstName  String
  lastName   String
  birthDate  DateTime
  phone      String
  email      String
  goals      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  kineId     Int
  kine       Kine         @relation(fields: [kineId], references: [id])

  programmes   Programme[]
  chatSessions ChatSession[]
}

model ExerciceModele {
  id          Int      @id @default(autoincrement())
  kine        Kine     @relation(fields: [kineId], references: [id])
  kineId      Int
  nom         String
  description String
  isPublic    Boolean          @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  exercicesProgramme ExerciceProgramme[]
}

model Programme {
  id          Int       @id @default(autoincrement())
  titre       String
  description String
  duree       Int       // en jours
  dateDebut   DateTime  @default(now())
  dateFin     DateTime
  isArchived  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  patientId   Int
  patient     Patient   @relation(fields: [patientId], references: [id])

  exercices   ExerciceProgramme[]
}

model ExerciceProgramme {
  id               Int             @id @default(autoincrement())
  programme        Programme       @relation(fields: [programmeId], references: [id])
  programmeId      Int
  exerciceModele   ExerciceModele @relation(fields: [exerciceModeleId], references: [id])
  exerciceModeleId Int

  series           Int
  repetitions      Int
  pause            Int         // en secondes
  consigne         String

  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model ChatSession {
  id          Int      @id @default(autoincrement())
  message     String   // Le contenu du message
  role        ChatRole // Qui a envoyé le message
  createdAt   DateTime @default(now())
  sessionDate DateTime @default(now()) @db.Date // Date de la session (sans heure)
  
  // Relation avec le patient
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Index pour optimiser les requêtes
  @@index([patientId, sessionDate])
  @@index([sessionDate]) // Pour le nettoyage automatique
  @@map("chat_sessions")
}

enum ChatRole {
  USER      // Message du patient
  ASSISTANT // Réponse de l'IA
  SYSTEM    // Messages système (bienvenue, etc.)
  
  @@map("chat_role")
}