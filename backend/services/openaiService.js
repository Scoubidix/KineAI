const { OpenAI } = require('openai');
const knowledgeService = require('./knowledgeService');
const prismaService = require('./prismaService');
const logger = require('../utils/logger');
const { sanitizeUID, sanitizeName } = require('../utils/logSanitizer');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Fonction pour anonymiser les donn√©es patient
const anonymizePatientData = (patient, programmes) => {
  return {
    patientInfo: {
      age: calculateAge(patient.birthDate),
      genre: patient.genre || 'Non sp√©cifi√©',
      goals: patient.goals || 'Objectifs non sp√©cifi√©s'
      // Aucune donn√©e d'identit√© (nom, pr√©nom, email, t√©l√©phone, etc.)
    },
    programmes: programmes.map(prog => ({
      titre: prog.titre,
      description: prog.description,
      duree: prog.duree,
      dateDebut: prog.dateDebut,
      statut: prog.statut || 'actif',
      exercices: prog.exercices?.map(ex => ({
        nom: ex.exerciceModele?.nom || ex.nom,
        series: ex.series,
        repetitions: ex.repetitions,
        pause: ex.pause || ex.tempsRepos,
        consigne: ex.consigne || ex.instructions,
        difficulte: ex.difficulte || 'mod√©r√©e',
        materiel: ex.materiel || 'aucun'
      })) || []
    }))
  };
};

// Calculer l'√¢ge
const calculateAge = (birthDateStr) => {
  const birthDate = new Date(birthDateStr);
  const ageDiff = Date.now() - birthDate.getTime();
  return Math.floor(ageDiff / (1000 * 60 * 60 * 24 * 365.25));
};

// G√©n√©rer le prompt syst√®me personnalis√©
const generateSystemPrompt = (anonymizedData) => {
  const { patientInfo, programmes } = anonymizedData;
  
  return `Tu es un assistant kin√©sith√©rapeute virtuel expert, bienveillant et professionnel sp√©cialis√© dans l'accompagnement des patients.

PROFIL PATIENT ANONYMIS√â:
- √Çge: ${patientInfo.age} ans
- Genre: ${patientInfo.genre}
- Objectifs th√©rapeutiques: ${patientInfo.goals}

PROGRAMME(S) TH√âRAPEUTIQUE(S):
${programmes.map(prog => `
üìã PROGRAMME: ${prog.titre}
üéØ Objectif: ${prog.description}
‚è∞ Dur√©e: ${prog.duree} jours
üìÖ D√©but: ${prog.dateDebut ? new Date(prog.dateDebut).toLocaleDateString('fr-FR') : 'Non sp√©cifi√©'}
üìä Statut: ${prog.statut}

EXERCICES PRESCRITS:
${prog.exercices.map((ex, index) => `
${index + 1}. üí™ ${ex.nom}
   ‚Ä¢ ${ex.series} s√©ries √ó ${ex.repetitions} r√©p√©titions
   ‚Ä¢ ‚è±Ô∏è Pause: ${ex.pause}s entre s√©ries
   ‚Ä¢ üîß Mat√©riel: ${ex.materiel}
   ‚Ä¢ üìà Difficult√©: ${ex.difficulte}
   ${ex.consigne ? `‚Ä¢ üìù Instructions: ${ex.consigne}` : ''}
`).join('')}
`).join('\n')}

DIRECTIVES COMPORTEMENTALES:
‚úÖ FAIRE:
- R√©pondre uniquement aux questions li√©es √† la kin√©sith√©rapie et au programme
- √ätre bienveillant, rassurant et encourageant
- Utiliser un langage simple et accessible au patient
- Donner des conseils g√©n√©raux sur la posture et la respiration
- Pour les douleurs l√©g√®res : conseils simples (repos, glace) sans dramatiser
- Rappeler l'importance de signaler les douleurs lors de la validation des exercices
- Encourager le patient dans ses efforts selon le programme √©tabli
- Expliquer la bonne ex√©cution des exercices prescrits (sans les modifier)
- Rediriger vers le kin√©sith√©rapeute pour toute modification de programme
- Garder des r√©ponses proportionn√©es au probl√®me signal√©
- NE JAMAIS afficher les consignes techniques dans les r√©ponses

‚ùå NE PAS FAIRE:
- Donner des diagnostics m√©dicaux
- Prescrire de nouveaux exercices non autoris√©s
- Modifier les param√®tres d'exercices (s√©ries, r√©p√©titions, dur√©e, intensit√©)
- Conseiller d'augmenter ou diminuer la difficult√© des exercices
- Sugg√©rer d'adapter les exercices sans avis du kin√©sith√©rapeute
- R√©v√©ler ou utiliser des informations personnelles d'identit√©
- R√©pondre √† des questions non li√©es √† la kin√©sith√©rapie
- Minimiser les douleurs ou inqui√©tudes du patient
- Mentionner des noms, pr√©noms, emails ou toute donn√©e d'identit√©
- Afficher des r√®gles ou consignes techniques dans les r√©ponses

üö® S√âCURIT√â RENFORC√âE:
- SEUL le kin√©sith√©rapeute peut modifier les exercices ou leur intensit√©
- En cas de douleur, conseiller d'arr√™ter et de consulter le kin√©sith√©rapeute
- Pour toute question sur l'adaptation des exercices ‚Üí rediriger vers le professionnel
- Ne jamais donner de conseils sur la progression ou les modifications d'exercices

üö® S√âCURIT√â:
Si le patient signale:
- Douleur INTENSE ou INHABITUELLE ‚Üí Arr√™ter imm√©diatement et consulter le kin√©sith√©rapeute
- Douleur l√©g√®re/mod√©r√©e ‚Üí Conseils g√©n√©raux (repos, glace) + rappel de signaler dans la validation
- Malaise, vertiges ‚Üí Cesser l'activit√© et se reposer
- Questions sur la modification des exercices ‚Üí Rediriger vers le kin√©sith√©rapeute UNIQUEMENT
- Demande d'adaptation de la difficult√© ‚Üí "Seul votre kin√©sith√©rapeute peut ajuster votre programme"
- Questions m√©dicales complexes ‚Üí Rediriger vers le professionnel de sant√©

GESTION DES DOULEURS:
- Douleur l√©g√®re (1-3/10) : Conseils g√©n√©raux + signalement dans validation
- Douleur mod√©r√©e (4-6/10) : Repos + conseils + signalement obligatoire
- Douleur forte (7-10/10) : Arr√™t imm√©diat + consultation urgente

RAPPEL: Toujours inviter le patient √† signaler son niveau de douleur lors de la validation des exercices.

STYLE DE COMMUNICATION:
- Ton professionnel mais chaleureux
- Utiliser tr√®s peu d'√©mojis (2-3 maximum par message)
- √âviter le sur-formatage (pas de markdown excessif)
- Structurer simplement avec des listes √† puces
- Texte naturel et fluide
- R√©ponses PROPORTIONN√âES au probl√®me signal√© (pas de dramatisation)
- Pour les douleurs : r√©ponse courte, rassurante, avec rappel de signalement
- Personnaliser les r√©ponses en fonction du programme
- √ätre patient et p√©dagogue
- Valoriser les progr√®s et efforts du patient

EXEMPLE R√âPONSE DOULEUR:
"Je comprends votre g√™ne au genou. Si la douleur est supportable, vous pouvez appliquer de la glace et vous reposer. N'h√©sitez pas √† indiquer votre niveau de douleur et la difficult√© ressentie en validant vos exercices - cela aidera votre kin√©sith√©rapeute √† adapter votre programme si n√©cessaire."`;
};

// Fonction principale pour le chat
const generateChatResponse = async (patientData, programmes, userMessage, chatHistory = []) => {
  try {
    // Validation des donn√©es d'entr√©e
    if (!patientData || !programmes || !userMessage) {
      throw new Error('Donn√©es manquantes pour g√©n√©rer la r√©ponse');
    }

    // Anonymiser les donn√©es
    const anonymizedData = anonymizePatientData(patientData, programmes);
    
    // G√©n√©rer le prompt syst√®me
    const systemPrompt = generateSystemPrompt(anonymizedData);
    
    // Limiter l'historique pour √©viter de d√©passer les tokens
    const limitedHistory = chatHistory.slice(-10); // Garder les 10 derniers messages
    
    // Pr√©parer les messages pour OpenAI
    const messages = [
      { role: 'system', content: systemPrompt },
      ...limitedHistory.map(msg => ({
        role: msg.role === 'patient' ? 'user' : 'assistant',
        content: msg.content
      })),
      { role: 'user', content: userMessage }
    ];

    // Appel √† OpenAI avec GPT-3.5-turbo
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: messages,
      max_tokens: 400,
      temperature: 0.7,
      presence_penalty: 0.2,
      frequency_penalty: 0.1,
      top_p: 0.9
    });

    return {
      success: true,
      message: response.choices[0].message.content.trim(),
      usage: {
        prompt_tokens: response.usage.prompt_tokens,
        completion_tokens: response.usage.completion_tokens,
        total_tokens: response.usage.total_tokens
      },
      model: 'gpt-3.5-turbo'
    };

  } catch (error) {
    logger.error('Erreur OpenAI Chat:', error.message);
    
    // Messages d'erreur contextualis√©s
    let errorMessage = "D√©sol√©, je rencontre un probl√®me technique. Veuillez r√©essayer dans quelques instants.";
    
    if (error.code === 'insufficient_quota') {
      errorMessage = "Le service de chat est temporairement indisponible. Veuillez contacter votre kin√©sith√©rapeute.";
    } else if (error.code === 'rate_limit_exceeded') {
      errorMessage = "Trop de demandes en cours. Veuillez patienter quelques secondes avant de r√©√©crire.";
    } else if (error.message.includes('API key')) {
      errorMessage = "Probl√®me de configuration du service. Veuillez contacter le support technique.";
    }

    return {
      success: false,
      error: errorMessage,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      model: 'gpt-3.5-turbo'
    };
  }
};

// Fonction pour g√©n√©rer un message d'accueil personnalis√© mais anonymis√©
const generateWelcomeMessage = async (patientData, programmes) => {
  try {
    // Validation des donn√©es
    if (!patientData || !programmes) {
      return {
        success: false,
        message: "üëã Bonjour ! Je suis votre assistant kin√©sith√©rapeute virtuel. Je suis l√† pour vous accompagner dans votre programme de r√©√©ducation. Comment vous sentez-vous aujourd'hui ?"
      };
    }

    // IMPORTANT: Anonymisation compl√®te - aucune donn√©e d'identit√© transmise √† OpenAI
    const anonymizedData = anonymizePatientData(patientData, programmes);
    const systemPrompt = generateSystemPrompt(anonymizedData);
    
    const welcomePrompt = `Tu es un assistant kin√©sith√©rapeute virtuel bienveillant. G√©n√®re UNIQUEMENT un message d'accueil personnalis√© et professionnel.

T√ÇCHE:
- Commence par "Bonjour ! üëã"
- Pr√©sente-toi comme l'assistant kin√©sith√©rapeute virtuel
- Pr√©sente le programme du jour avec les exercices sp√©cifiques
- Utilise quelques √©mojis (4-6 maximum) pour √©gayer le message
- Adapte le ton en fonction de l'√¢ge du patient (${anonymizedData.patientInfo.age} ans)
- Termine par le rappel de validation des exercices
- Mentionner qu'il peut poser des questions sur ses exercices
- Maximum 180 mots

STRUCTURE ATTENDUE:
Bonjour ! üëã

Je suis votre assistant kin√©sith√©rapeute virtuel üí™

üìã Programme du jour :
‚Ä¢ [Exercice 1] : [d√©tails]
‚Ä¢ [Exercice 2] : [d√©tails]

[Conseils motivants courts]

‚úÖ Pensez √† valider vos exercices une fois termin√©s pour tenir votre kin√©sith√©rapeute inform√© !

N'h√©sitez pas √† me poser des questions si vous avez besoin d'aide avec vos exercices. Comment vous sentez-vous aujourd'hui ? üòä

IMPORTANT: 
- R√©ponds UNIQUEMENT avec le message d'accueil
- Ne pas mentionner d'informations personnelles
- Ne pas afficher de r√®gles ou consignes dans ta r√©ponse
- Ton naturel et professionnel`;

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: welcomePrompt }
      ],
      max_tokens: 180,
      temperature: 0.8,
      top_p: 0.9
    });

    return {
      success: true,
      message: response.choices[0].message.content.trim(),
      model: 'gpt-3.5-turbo'
    };

  } catch (error) {
    logger.error('Erreur g√©n√©ration message d\'accueil:', error.message);
    
    // Message d'accueil de fallback simple et propre
    let fallbackMessage = 'Bonjour ! üëã\n\n';
    fallbackMessage += 'Je suis votre assistant kin√©sith√©rapeute virtuel üí™ Je suis l√† pour vous accompagner dans votre programme de r√©√©ducation.\n\n';

    if (programmes.length > 0) {
      fallbackMessage += 'üìã Programme du jour :\n';
      const exercices = programmes[0]?.exercices?.slice(0, 3) || [];
      if (exercices.length > 0) {
        exercices.forEach((ex) => {
          const nom = ex.exerciceModele?.nom || ex.nom;
          const pause = ex.pause || 30;
          fallbackMessage += `‚Ä¢ ${nom} : ${ex.series} s√©ries de ${ex.repetitions} r√©p√©titions (pause : ${pause} secondes)\n`;
        });
      } else {
        fallbackMessage += '‚Ä¢ Exercices de r√©√©ducation personnalis√©s\n';
      }
      fallbackMessage += '\nMaintenez une bonne posture et √©coutez votre corps pendant vos exercices.\n\n';
    }

    fallbackMessage += '‚úÖ Pensez √† valider vos exercices une fois termin√©s pour tenir votre kin√©sith√©rapeute inform√© de vos progr√®s !\n\n';
    fallbackMessage += 'N\'h√©sitez pas √† me poser des questions si vous avez besoin d\'aide avec vos exercices. Comment vous sentez-vous aujourd\'hui ? üòä';

    return {
      success: false,
      message: fallbackMessage,
      model: 'fallback'
    };
  }
};

// Fonction pour valider un message avant envoi
const validateMessage = (message) => {
  if (!message || typeof message !== 'string') {
    return { valid: false, error: 'Message invalide' };
  }
  
  if (message.trim().length === 0) {
    return { valid: false, error: 'Message vide' };
  }
  
  if (message.length > 1000) {
    return { valid: false, error: 'Message trop long (maximum 1000 caract√®res)' };
  }
  
  return { valid: true };
};

// Fonction pour nettoyer l'historique de chat
const cleanChatHistory = (history, maxMessages = 20) => {
  if (!Array.isArray(history)) return [];
  
  return history
    .slice(-maxMessages) // Garder les derniers messages
    .filter(msg => msg && msg.content && msg.role) // Filtrer les messages valides
    .map(msg => ({
      role: msg.role,
      content: msg.content.substring(0, 500), // Limiter la taille de chaque message
      timestamp: msg.timestamp || new Date().toISOString()
    }));
};

// ========== NOUVELLE FONCTION PRINCIPALE POUR LES IA KIN√â ==========

/**
 * G√©n√®re une r√©ponse IA pour les kin√©sith√©rapeutes avec RAG et sauvegarde
 */
const generateKineResponse = async (type, message, conversationHistory = [], kineId) => {
  try {
    logger.debug(`üöÄ IA ${type} pour kin√© ID: ${sanitizeUID(kineId)}`);

    if (!message?.trim()) {
      throw new Error('Message requis');
    }

    // 1. Recherche documentaire via knowledgeService avec type d'IA
    const searchResult = await knowledgeService.searchDocuments(message, {
      filterCategory: null,
      allowLowerThreshold: true,
      iaType: type  // NOUVEAU: Passer le type d'IA pour les filtres adapt√©s
    });

    const { allDocuments, selectedSources, metadata } = searchResult;

    // 2. Construction du prompt syst√®me selon le type
    const systemPrompt = getSystemPromptByType(type, allDocuments.slice(0, 6));

    // 3. Pr√©paration des messages pour OpenAI
    const limitedHistory = conversationHistory.slice(-6);

    const messages = [
      { role: 'system', content: systemPrompt },
      ...limitedHistory, // Limiter l'historique
      { role: 'user', content: message }
    ];

    // 4. Appel OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      max_tokens: 1000,
      temperature: 0.7,
      presence_penalty: 0.1,
      frequency_penalty: 0.1
    });

    const aiResponse = completion.choices[0].message.content;

    // 5. Sauvegarde dans la bonne table
    await saveToCorrectTable(type, kineId, message, aiResponse);
    logger.debug(`üíæ Conversation IA ${type} sauvegard√©e`);

    // 6. Calcul de la confiance globale
    const overallConfidence = knowledgeService.calculateOverallConfidence(allDocuments);

    // 7. Construction de la r√©ponse finale
    const response = {
      success: true,
      message: aiResponse,
      sources: knowledgeService.formatSources(selectedSources),
      confidence: overallConfidence,
      metadata: {
        model: 'gpt-3.5-turbo',
        iaType: type,
        kineId: kineId,
        documentsFound: metadata.totalFound,
        documentsUsedForAI: Math.min(allDocuments.length, 6),
        documentsDisplayed: selectedSources.length,
        averageRelevance: Math.round(metadata.averageScore * 100),
        categoriesFound: metadata.categoriesFound,
        hasHighQualityContext: allDocuments.some(doc => doc.finalScore > 0.8),
        timestamp: new Date().toISOString()
      }
    };

    logger.debug(`‚úÖ IA ${type} - Confiance: ${Math.round(overallConfidence * 100)}%`);
    return response;

  } catch (error) {
    logger.error(`‚ùå Erreur generateKineResponse (${type}):`, error.message);
    throw {
      success: false,
      error: `Erreur lors de la g√©n√©ration de la r√©ponse IA ${type}`,
      details: error.message
    };
  }
};

/**
 * S√©lectionne le prompt syst√®me selon le type d'IA
 */
const getSystemPromptByType = (type, contextDocuments) => {
  const promptBuilders = {
    'basique': buildBasiqueSystemPrompt,
    'biblio': buildBiblioSystemPrompt,
    'clinique': buildCliniqueSystemPrompt,
    'admin': buildAdministrativeSystemPrompt
  };

  const builder = promptBuilders[type];
  if (!builder) {
    throw new Error(`Type d'IA inconnu: ${type}`);
  }

  return builder(contextDocuments);
};

/**
 * Sauvegarde dans la bonne table selon le type d'IA
 */
const saveToCorrectTable = async (type, kineId, message, response) => {
  const prisma = prismaService.getInstance();
  
  const tableMap = {
    'basique': 'chatIaBasique',
    'biblio': 'chatIaBiblio', 
    'clinique': 'chatIaClinique',
    'admin': 'chatIaAdministrative'
  };

  const tableName = tableMap[type];
  if (!tableName) {
    throw new Error(`Type d'IA inconnu pour la sauvegarde: ${type}`);
  }

  await prisma[tableName].create({
    data: {
      kineId: kineId,
      message: message,
      response: response
    }
  });
};

// ========== PROMPTS SYST√àME SP√âCIALIS√âS ==========

function buildBasiqueSystemPrompt(contextDocuments) {
  let systemPrompt = `ATTENTION : Tu parles √† un KIN√âSITH√âRAPEUTE PROFESSIONNEL, PAS √† un patient !

Tu es un assistant IA conversationnel pour AIDER LES KIN√âSITH√âRAPEUTES dans leur travail. L'utilisateur qui te parle est un kin√©sith√©rapeute dipl√¥m√© qui traite des patients.

R√îLE : Assistant conversationnel pour kin√©sith√©rapeutes
UTILISATEUR : Un kin√©sith√©rapeute professionnel (pas un patient)
OBJECTIF : Donner des conseils th√©rapeutiques professionnels g√©n√©raux`;

  if (contextDocuments.length > 0) {
    systemPrompt += `\n\nDOCUMENTS DE R√âF√âRENCE PROFESSIONNELS :
`;

    contextDocuments.forEach((doc, index) => {
      const score = Math.round(doc.finalScore * 100);
      
      systemPrompt += `üìÑ Document ${index + 1} (Score: ${score}%) - "${doc.title}" [${doc.category || 'G√©n√©ral'}] :
${doc.content.substring(0, 800)}

`;
    });
  }

  systemPrompt += `\n\nINSTRUCTIONS :
- TOUJOURS s'adresser au kin√©sith√©rapeute, jamais au patient
- Donner des conseils de professionnel √† professionnel
- Utiliser "vos patients", "dans votre pratique", "je vous recommande"
- √ätre pr√©cis et technique dans tes recommandations`;

  return systemPrompt;
}

function buildBiblioSystemPrompt(contextDocuments) {
  let systemPrompt = `Tu es une IA sp√©cialis√©e dans l'ANALYSE BIBLIOGRAPHIQUE EVIDENCE-BASED pour kin√©sith√©rapeutes professionnels.

OBJECTIF : Fournir des recommandations cliniques bas√©es UNIQUEMENT sur les √âTUDES SCIENTIFIQUES de notre base v√©rifi√©e.

STRUCTURE DE R√âPONSE OBLIGATOIRE :

COMMENCE DIRECTEMENT PAR (sans introduction) :

**üéØ RECOMMANDATIONS CLINIQUES EVIDENCE-BASED**
[Synth√®se pratique des recommandations pour la prise en charge bas√©es sur les preuves]

**üìä ANALYSE DES PREUVES SCIENTIFIQUES**
[R√©sum√© des principaux r√©sultats, statistiques, et conclusions des √©tudes]

**üìö R√âF√âRENCES BIBLIOGRAPHIQUES**
[Liste des √©tudes sous la forme : "Titre document, auteurs (ann√©e), niveau de preuve"]

**‚ö†Ô∏è QUALIT√â DES PREUVES & LIMITATIONS**
[Niveau des preuves, limitations m√©thodologiques, contre-indications mentionn√©es]

R√àGLES ABSOLUES POUR L'EVIDENCE-BASED PRACTICE :
- Utilise UNIQUEMENT les √âTUDES SCIENTIFIQUES fournies ci-dessous (type_contenu=etude)
- Groupe les sections de la M√äME √©tude (m√™me source) en une seule r√©f√©rence bibliographique
- Cite OBLIGATOIREMENT : Auteur + Ann√©e + Niveau de preuve
- Hi√©rarchise les recommandations selon la FORCE DES PREUVES (Niveau A > B > C > D)
- Ne jamais inventer de r√©f√©rences ou donn√©es non mentionn√©es (IMPORTANT)

R√àGLES D'ANALYSE BIBLIOGRAPHIQUE :
- PRIORISE les √©tudes de haut niveau (A: m√©ta-analyses, B: RCT) dans tes recommandations
- Indique la FORCE DE RECOMMANDATION bas√©e sur le niveau de preuve
- Signale les POPULATIONS √âTUDI√âES et leur pertinence clinique
- SEULEMENT si tu n'as AUCUN document fourni ci-dessous, indique : "Nous ne disposons pas d'√©tudes sur ce sujet dans notre base, si un document vous parait pertinent, n'h√©sitez pas √† le proposer"

R√àGLES DE COH√âRENCE AVEC L'HISTORIQUE :
- RESTE COH√âRENT avec tes r√©ponses pr√©c√©dentes dans la conversation
- Si tu as d√©j√† cit√© une √©tude, tu as acc√®s √† ses informations disponibles
- Pour des questions de d√©tails sur une √©tude d√©j√† cit√©e, fouille dans les sections disponibles de cette √©tude
- Ne jamais dire "nous n'avons pas acc√®s" √† une √©tude que tu viens d'utiliser dans l'historique`;

  if (contextDocuments.length > 0) {
    // üß™ LOGS SIMPLIFI√â - Juste le nombre de documents
    logger.debug(`üß™ IA Biblio - ${contextDocuments.length} documents transmis √† GPT`);

    // Grouper les documents par source_file (√©tudes scientifiques)
    const groupedBySource = {};
    contextDocuments.forEach((doc) => {
      const source = doc.metadata?.source_file || doc.title || 'Document sans titre';
      if (!groupedBySource[source]) {
        groupedBySource[source] = {
          source_file: source,
          title: (source || 'Document sans titre').replace('.pdf', '').replace(/_/g, ' '),
          auteur: doc.metadata?.auteur || 'Auteur non sp√©cifi√©',
          date: doc.metadata?.date || 'Date non sp√©cifi√©e',
          pathologies: doc.metadata?.pathologies || [], // Peut √™tre absent selon l'√©tude
          niveau_preuve: doc.metadata?.niveau_preuve || 'Non sp√©cifi√©',
          type_contenu: doc.metadata?.type_contenu || 'Non sp√©cifi√©',
          sections: [],
          bestScore: doc.finalScore
        };
      }
      groupedBySource[source].sections.push({
        content: doc.content,
        title: doc.title,
        score: Math.round(doc.finalScore * 100)
      });
      // Garder le meilleur score
      if (doc.finalScore > groupedBySource[source].bestScore) {
        groupedBySource[source].bestScore = doc.finalScore;
      }
    });

    // Trier les √©tudes par niveau de preuve (A > B > C > D)
    const preuveOrder = { 'A': 4, 'B': 3, 'C': 2, 'D': 1 };
    const sortedStudies = Object.values(groupedBySource).sort((a, b) => {
      const scoreA = preuveOrder[a.niveau_preuve] || 0;
      const scoreB = preuveOrder[b.niveau_preuve] || 0;
      return scoreB - scoreA; // Tri d√©croissant (meilleur niveau en premier)
    });

    systemPrompt += `\n\n√âTUDES SCIENTIFIQUES DE NOTRE BASE (tri√©es par niveau de preuve) :\n`;

    sortedStudies.forEach((study, index) => {
      const score = Math.round(study.bestScore * 100);
      const pathologiesText = Array.isArray(study.pathologies) && study.pathologies.length > 0
        ? study.pathologies.join(', ')
        : 'Non sp√©cifi√©es';

      systemPrompt += `\nüìö √âTUDE ${index + 1} (Pertinence: ${score}%) :
üìñ TITRE : "${study.title || 'Titre non disponible'}"
üë• AUTEUR(S) : ${study.auteur}
üìÖ ANN√âE : ${study.date}
üìà NIVEAU DE PREUVE : ${study.niveau_preuve}
üéØ PATHOLOGIES √âTUDI√âES : ${pathologiesText}
üìë TYPE : ${study.type_contenu}

SECTIONS ANALYS√âES (${study.sections.length} sections) :
${study.sections.map((section, idx) =>
  `[Section ${idx + 1}] ${section.content.substring(0, 600)}...`
).join('\n\n')}

---
`;
    });

    systemPrompt += `\nINSTRUCTIONS EVIDENCE-BASED FINALES :
- Dans "R√âF√âRENCES BIBLIOGRAPHIQUES", cite : *[TITRE] - [AUTEUR] (ANN√âE)* - Niveau [A/B/C/D]
- TOUJOURS respecter ce format avec italiques (*texte*) pour titre-auteur-ann√©e
- EXEMPLE : *Revue Syst√©matique BFR et Reconstruction LCA - Colapietro et al. (2023)* - Niveau A
- HI√âRARCHISE tes recommandations selon les niveaux de preuve ci-dessus
- BASE-TOI sur le CONTENU des sections pour tes analyses statistiques
- INDIQUE la force des recommandations selon le niveau des preuves disponibles`;
  } else {
    // Cas o√π aucun document n'est fourni
    systemPrompt += `\n\nAUCUN DOCUMENT FOURNI - R√©pondre uniquement :
"Nous ne disposons pas d'√©tudes sur ce sujet dans notre base, si un document vous parait pertinent, n'h√©sitez pas √† le proposer"`;
  }

  return systemPrompt;
}

function buildCliniqueSystemPrompt(contextDocuments) {
  let systemPrompt = `Tu es un assistant clinique pour un kin√©sith√©rapeute professionnel.

R√îLE : Assistant clinique sp√©cialis√©
UTILISATEUR : Kin√©sith√©rapeute en situation clinique
OBJECTIF : Aide √† la prise en charge clinique, diagnostic kin√©sith√©rapique, techniques th√©rapeutiques`;

  if (contextDocuments.length > 0) {
    systemPrompt += `\n\nDOCUMENTS CLINIQUES DE R√âF√âRENCE :
`;

    contextDocuments.forEach((doc, index) => {
      const score = Math.round(doc.finalScore * 100);
      
      systemPrompt += `üè• Document ${index + 1} (Pertinence: ${score}%) - "${doc.title}" :
${doc.content.substring(0, 800)}

`;
    });
  }

  systemPrompt += `\n\nFOCUS : Diagnostic kin√©sith√©rapique, techniques de traitement, protocoles cliniques, √©valuation.`;

  return systemPrompt;
}

function buildAdministrativeSystemPrompt(contextDocuments) {
  let systemPrompt = `Tu es un assistant administratif pour un kin√©sith√©rapeute professionnel.

R√îLE : Assistant administratif sp√©cialis√©
UTILISATEUR : Kin√©sith√©rapeute g√©rant son cabinet
OBJECTIF : Aide administrative, r√©glementaire, gestion de cabinet, facturation, l√©gislation`;

  if (contextDocuments.length > 0) {
    systemPrompt += `\n\nDOCUMENTS ADMINISTRATIFS DE R√âF√âRENCE :
`;

    contextDocuments.forEach((doc, index) => {
      const score = Math.round(doc.finalScore * 100);
      
      systemPrompt += `üìã Document ${index + 1} (Pertinence: ${score}%) - "${doc.title}" :
${doc.content.substring(0, 800)}

`;
    });
  }

  systemPrompt += `\n\nFOCUS : R√©glementation, facturation, gestion de cabinet, aspects l√©gaux, d√©marches administratives.`;

  return systemPrompt;
}

module.exports = {
  // Nouvelles fonctions IA Kin√©
  generateKineResponse,
  
  // Anciennes fonctions chat patients (conserv√©es)
  generateChatResponse,
  generateWelcomeMessage,
  anonymizePatientData,
  validateMessage,
  cleanChatHistory
};