const { OpenAI } = require('openai');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Fonction pour anonymiser les donn√©es patient
const anonymizePatientData = (patient, programmes) => {
  return {
    patientInfo: {
      age: calculateAge(patient.birthDate),
      genre: patient.genre || 'Non sp√©cifi√©', // Si vous avez ce champ
      identifier: `Patient ${patient.id.toString().slice(-3)}` // Ex: "Patient 123"
    },
    programmes: programmes.map(prog => ({
      titre: prog.titre,
      description: prog.description,
      duree: prog.duree,
      exercices: prog.exercices?.map(ex => ({
        nom: ex.exerciceModele?.nom || ex.nom,
        series: ex.series,
        repetitions: ex.repetitions,
        pause: ex.pause || ex.tempsRepos,
        consigne: ex.consigne || ex.instructions
      })) || []
    }))
  };
};

// Calculer l'√¢ge
const calculateAge = (birthDateStr) => {
  const birthDate = new Date(birthDateStr);
  const ageDiff = Date.now() - birthDate.getTime();
  return Math.floor(ageDiff / (1000 * 60 * 60 * 24 * 365.25));
};

// G√©n√©rer le prompt syst√®me personnalis√©
const generateSystemPrompt = (anonymizedData) => {
  const { patientInfo, programmes } = anonymizedData;
  
  return `Tu es un assistant kin√©sith√©rapeute virtuel bienveillant et professionnel. 

CONTEXTE PATIENT:
- Identifiant: ${patientInfo.identifier}
- √Çge: ${patientInfo.age} ans
- Genre: ${patientInfo.genre}

PROGRAMME(S) ACTUEL(S):
${programmes.map(prog => `
üìã ${prog.titre}
Description: ${prog.description}
Dur√©e: ${prog.duree} jours

Exercices:
${prog.exercices.map(ex => `
‚Ä¢ ${ex.nom}
  - ${ex.series} s√©ries de ${ex.repetitions} r√©p√©titions
  - Pause: ${ex.pause}s entre les s√©ries
  ${ex.consigne ? `- Consignes: ${ex.consigne}` : ''}
`).join('')}
`).join('\n')}

INSTRUCTIONS:
1. R√©ponds uniquement aux questions li√©es √† la kin√©sith√©rapie et au programme du patient
2. Sois bienveillant, rassurant et encourageant
3. Utilise un langage simple et accessible
4. Si on te pose des questions m√©dicales complexes, redirige vers le kin√©sith√©rapeute
5. Rappelle r√©guli√®rement l'importance de suivre le programme
6. Ne donne jamais d'informations personnelles du patient
7. En cas de douleur intense, conseille d'arr√™ter et de consulter

TONE: Professionnel mais chaleureux, comme un kin√©sith√©rapeute exp√©riment√© et bienveillant.`;
};

// Fonction principale pour le chat
const generateChatResponse = async (patientData, programmes, userMessage, chatHistory = []) => {
  try {
    // Anonymiser les donn√©es
    const anonymizedData = anonymizePatientData(patientData, programmes);
    
    // G√©n√©rer le prompt syst√®me
    const systemPrompt = generateSystemPrompt(anonymizedData);
    
    // Pr√©parer les messages pour OpenAI
    const messages = [
      { role: 'system', content: systemPrompt },
      ...chatHistory.map(msg => ({
        role: msg.role,
        content: msg.content
      })),
      { role: 'user', content: userMessage }
    ];

    // Appel √† OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: messages,
      max_tokens: 500,
      temperature: 0.7,
      presence_penalty: 0.1,
      frequency_penalty: 0.1
    });

    return {
      success: true,
      message: response.choices[0].message.content,
      usage: response.usage
    };

  } catch (error) {
    console.error('Erreur OpenAI:', error);
    return {
      success: false,
      error: 'D√©sol√©, je rencontre un probl√®me technique. Veuillez r√©essayer dans quelques instants.',
      details: error.message
    };
  }
};

// Fonction pour g√©n√©rer un message d'accueil personnalis√©
const generateWelcomeMessage = async (patientData, programmes) => {
  try {
    const anonymizedData = anonymizePatientData(patientData, programmes);
    const systemPrompt = generateSystemPrompt(anonymizedData);
    
    const welcomePrompt = `G√©n√®re un message d'accueil personnalis√© pour ce patient. 
    Pr√©sente-toi, r√©sume son programme du jour de mani√®re encourageante, et invite-le √† poser des questions.
    Sois chaleureux et motivant. Maximum 150 mots.`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: welcomePrompt }
      ],
      max_tokens: 200,
      temperature: 0.8
    });

    return {
      success: true,
      message: response.choices[0].message.content
    };

  } catch (error) {
    console.error('Erreur g√©n√©ration message d\'accueil:', error);
    return {
      success: false,
      message: "Bonjour ! Je suis votre assistant kin√©sith√©rapeute virtuel. Je suis l√† pour vous accompagner dans votre programme d'exercices et r√©pondre √† vos questions. Comment puis-je vous aider aujourd'hui ?"
    };
  }
};

module.exports = {
  generateChatResponse,
  generateWelcomeMessage,
  anonymizePatientData
};