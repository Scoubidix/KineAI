// middleware/authorization.js
const logger = require('../utils/logger');
const { sanitizeEmail } = require('../utils/logSanitizer');
// Middleware pour v√©rifier les autorisations selon le plan d'abonnement

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * Middleware pour v√©rifier si le kin√© peut cr√©er un nouveau programme
 */
const canCreateProgramme = async (req, res, next) => {
  try {
    const kine = await prisma.kine.findUnique({
      where: { uid: req.uid },
      select: { id: true, planType: true }
    });

    if (!kine) {
      return res.status(404).json({ error: 'Kin√©sith√©rapeute non trouv√©' });
    }

    const planType = kine.planType || 'FREE';

    // D√©finir les limites par plan
    const limits = {
      'FREE': 0,
      'DECLIC': 1,
      'PRATIQUE': 3,
      'PIONNIER': -1, // illimit√©
      'EXPERT': -1    // illimit√©
    };

    const maxProgrammes = limits[planType];

    // Si illimit√©, autoriser
    if (maxProgrammes === -1) {
      req.kineId = kine.id;
      req.planType = planType;
      return next();
    }

    // Si limite √† 0, bloquer
    if (maxProgrammes === 0) {
      return res.status(403).json({ 
        error: 'Cr√©ation de programme non autoris√©e',
        code: 'PLAN_REQUIRED',
        message: 'Un abonnement est requis pour cr√©er un programme patient',
        recommendedPlan: 'DECLIC'
      });
    }

    // Compter les programmes actifs
    const today = new Date();
    const activeProgrammes = await prisma.programme.count({
      where: {
        patient: {
          kineId: kine.id
        },
        isArchived: false,
        dateFin: {
          gt: today
        }
      }
    });

    // V√©rifier la limite
    if (activeProgrammes >= maxProgrammes) {
      const recommendedPlan = planType === 'DECLIC' ? 'PRATIQUE' : 'PIONNIER';
      
      return res.status(403).json({ 
        error: 'Limite de programmes atteinte',
        code: 'PROGRAMME_LIMIT_REACHED',
        message: `Vous avez atteint la limite de ${maxProgrammes} programme(s) de votre plan ${planType}`,
        currentUsage: activeProgrammes,
        planLimit: maxProgrammes,
        recommendedPlan
      });
    }

    // Autoriser
    req.kineId = kine.id;
    req.planType = planType;
    next();

  } catch (error) {
    logger.error('Erreur v√©rification cr√©ation programme:', error);
    res.status(500).json({ error: 'Erreur interne du serveur' });
  }
};

/**
 * Middleware pour v√©rifier l'acc√®s √† un assistant IA
 * @param {string} assistantType - Type d'assistant requis
 */
const requireAssistant = (assistantType) => {
  return async (req, res, next) => {
    try {
      const kine = await prisma.kine.findUnique({
        where: { uid: req.uid },
        select: { id: true, planType: true }
      });

      if (!kine) {
        return res.status(404).json({ error: 'Kin√©sith√©rapeute non trouv√©' });
      }

      const planType = kine.planType || 'FREE';

      // D√©finir les assistants par plan
      const assistantsByPlan = {
        'FREE': [],
        'DECLIC': ['CONVERSATIONNEL'],
        'PRATIQUE': ['CONVERSATIONNEL', 'BIBLIOTHEQUE', 'CLINIQUE'],
        'PIONNIER': ['CONVERSATIONNEL', 'BIBLIOTHEQUE', 'CLINIQUE', 'ADMINISTRATIF'],
        'EXPERT': ['CONVERSATIONNEL', 'BIBLIOTHEQUE', 'CLINIQUE', 'ADMINISTRATIF']
      };

      const availableAssistants = assistantsByPlan[planType] || [];

      if (!availableAssistants.includes(assistantType)) {
        // D√©terminer le plan recommand√©
        let recommendedPlan = 'DECLIC';
        if (['BIBLIOTHEQUE', 'CLINIQUE'].includes(assistantType)) {
          recommendedPlan = 'PRATIQUE';
        } else if (assistantType === 'ADMINISTRATIF') {
          recommendedPlan = 'PIONNIER';
        }

        return res.status(403).json({ 
          error: 'Assistant IA non autoris√©',
          code: 'ASSISTANT_NOT_ALLOWED',
          message: `L'assistant ${assistantType} n'est pas disponible avec votre plan ${planType}`,
          assistantType,
          currentPlan: planType,
          availableAssistants,
          recommendedPlan
        });
      }

      // Autoriser
      req.kineId = kine.id;
      req.planType = planType;
      req.assistantType = assistantType;
      next();

    } catch (error) {
      logger.error('Erreur v√©rification assistant IA:', error);
      res.status(500).json({ error: 'Erreur interne du serveur' });
    }
  };
};

/**
 * Middleware pour v√©rifier l'acc√®s √† une fonctionnalit√© g√©n√©rale
 * @param {string} feature - Nom de la fonctionnalit√©
 */
const requireFeature = (feature) => {
  return async (req, res, next) => {
    try {
      const kine = await prisma.kine.findUnique({
        where: { uid: req.uid },
        select: { id: true, planType: true }
      });

      if (!kine) {
        return res.status(404).json({ error: 'Kin√©sith√©rapeute non trouv√©' });
      }

      const planType = kine.planType || 'FREE';

      // V√©rifier selon la fonctionnalit√©
      switch (feature) {
        case 'CREATE_PROGRAMME':
          // Rediriger vers canCreateProgramme
          return canCreateProgramme(req, res, next);

        case 'AI_CONVERSATIONNEL':
          return requireAssistant('CONVERSATIONNEL')(req, res, next);

        case 'AI_BIBLIOTHEQUE':
          return requireAssistant('BIBLIOTHEQUE')(req, res, next);

        case 'AI_CLINIQUE':
          return requireAssistant('CLINIQUE')(req, res, next);

        case 'AI_ADMINISTRATIF':
          return requireAssistant('ADMINISTRATIF')(req, res, next);

        default:
          return res.status(400).json({ 
            error: 'Fonctionnalit√© inconnue',
            feature 
          });
      }

    } catch (error) {
      logger.error('Erreur v√©rification fonctionnalit√©:', error);
      res.status(500).json({ error: 'Erreur interne du serveur' });
    }
  };
};

/**
 * Helper pour r√©cup√©rer les informations du plan actuel
 */
const getPlanInfo = async (req, res, next) => {
  try {
    const kine = await prisma.kine.findUnique({
      where: { uid: req.uid },
      select: { id: true, planType: true }
    });

    if (!kine) {
      return res.status(404).json({ error: 'Kin√©sith√©rapeute non trouv√©' });
    }

    req.kineId = kine.id;
    req.planType = kine.planType || 'FREE';
    next();

  } catch (error) {
    logger.error('Erreur r√©cup√©ration info plan:', error);
    res.status(500).json({ error: 'Erreur interne du serveur' });
  }
};

/**
 * Middleware pour v√©rifier l'acc√®s administrateur
 * Bas√© sur une liste d'emails autoris√©s
 */
const requireAdmin = async (req, res, next) => {
  try {
    // R√©cup√©rer l'utilisateur depuis son UID Firebase
    const kine = await prisma.kine.findUnique({
      where: { uid: req.uid },
      select: { id: true, email: true, firstName: true, lastName: true }
    });

    if (!kine) {
      return res.status(404).json({ 
        error: 'Utilisateur non trouv√©',
        code: 'USER_NOT_FOUND'
      });
    }

    // Liste des emails administrateurs
    const adminEmails = [
      'val50.jean@hotmail.fr',
      'admin@monassistantkine.com'
    ];

    // V√©rifier si l'email est dans la liste admin
    if (!adminEmails.includes(kine.email)) {
      logger.warn(`üö´ Tentative acc√®s admin refus√©e - User: ${sanitizeEmail(kine.email)} - Route: ${req.path}`);
      return res.status(403).json({ 
        error: 'Acc√®s administrateur requis',
        code: 'ADMIN_ACCESS_REQUIRED',
        message: 'Cette fonctionnalit√© est r√©serv√©e aux administrateurs'
      });
    }

    // Acc√®s accord√©
    logger.info(`‚úÖ Acc√®s admin accord√© - User: ${sanitizeEmail(kine.email)} - Route: ${req.path}`);
    req.kineId = kine.id;
    req.isAdmin = true;
    req.adminEmail = kine.email;
    req.adminName = `${kine.firstName} ${kine.lastName}`;
    
    next();

  } catch (error) {
    logger.error('Erreur v√©rification admin:', error);
    res.status(500).json({ 
      error: 'Erreur interne du serveur',
      code: 'ADMIN_CHECK_ERROR'
    });
  }
};

module.exports = {
  canCreateProgramme,
  requireAssistant,
  requireFeature,
  getPlanInfo,
  requireAdmin
};